# WikiRace - Global Project Context for Cursor AI

## Project Overview
WikiRace is a desktop Wikipedia navigation game built with PyQt6 and Python 3.13. Originally a solo game, it has been significantly expanded with real-time multiplayer functionality using a FastAPI + Socket.IO server architecture.

## Current Status: v1.6.0 (Beta with Multiplayer)
- âœ… Solo gameplay fully functional
- âœ… Multiplayer server infrastructure complete
- âœ… Real-time room management and player communication
- ðŸ”„ Multiplayer game flow implementation in progress
- ðŸ”„ UI polish and testing ongoing

## Architecture Overview

### Client Application (PyQt6)
- **Entry Point**: `bin/main.py` â†’ `src/app.py`
- **Main Window**: `src/gui/MainApplication.py` (tab-based interface)
- **Core Pages**: HomePage, SoloGamePage, MultiplayerPage
- **Game Logic**: `src/logic/GameLogic.py` (Wikipedia API, page selection)
- **Network**: `src/logic/Network.py` (Socket.IO client, REST API calls)
- **Theming**: `src/logic/ThemeManager.py` (dark/light mode support)

### Multiplayer Server (FastAPI + Socket.IO)
- **Location**: `server/` directory
- **Entry**: `server/start_server.py` â†’ `server/main.py`
- **Models**: `server/models.py` (GameRoom, Player, GameState)
- **Room Management**: `server/room_manager.py`
- **Socket Events**: `server/socket_handlers.py`
- **API Routes**: `server/api_routes.py`
- **Config**: `server/config.py`

## Key Technologies
- **Frontend**: PyQt6, PyQt6-WebEngine (Wikipedia display)
- **Backend**: FastAPI, Socket.IO, Pydantic
- **Data**: Redis (planned for persistence), in-memory storage (current)
- **APIs**: Wikipedia API, MediaWiki API
- **Build**: setuptools, pyproject.toml

## Project Structure
```
WikiRace/
â”œâ”€â”€ bin/main.py                 # Application entry point
â”œâ”€â”€ src/                        # Main application code
â”‚   â”œâ”€â”€ app.py                  # Application initialization
â”‚   â”œâ”€â”€ gui/                    # PyQt6 UI components
â”‚   â”‚   â”œâ”€â”€ MainApplication.py  # Main window with tabs
â”‚   â”‚   â”œâ”€â”€ HomePage.py         # Landing page and game setup
â”‚   â”‚   â”œâ”€â”€ SoloGamePage.py     # Solo Wikipedia racing game
â”‚   â”‚   â”œâ”€â”€ MultiplayerPage.py  # Multiplayer room management
â”‚   â”‚   â””â”€â”€ ...                 # Other UI components
â”‚   â”œâ”€â”€ logic/                  # Business logic
â”‚   â”‚   â”œâ”€â”€ GameLogic.py        # Core game mechanics
â”‚   â”‚   â”œâ”€â”€ Network.py          # Multiplayer networking
â”‚   â”‚   â”œâ”€â”€ ThemeManager.py     # UI theming system
â”‚   â”‚   â””â”€â”€ ...
â”‚   â””â”€â”€ resources/              # Assets (icons, images)
â”œâ”€â”€ server/                     # Multiplayer server
â”‚   â”œâ”€â”€ main.py                 # FastAPI application
â”‚   â”œâ”€â”€ start_server.py         # Server startup script
â”‚   â”œâ”€â”€ models.py               # Data models (Pydantic)
â”‚   â”œâ”€â”€ room_manager.py         # Game room lifecycle
â”‚   â”œâ”€â”€ socket_handlers.py      # Socket.IO events
â”‚   â”œâ”€â”€ api_routes.py           # REST API endpoints
â”‚   â””â”€â”€ config.py               # Server configuration
â”œâ”€â”€ docs/                       # Documentation
â”‚   â”œâ”€â”€ MULTIPLAYER_SPEC.md     # Detailed multiplayer architecture
â”‚   â”œâ”€â”€ SETUP_INSTRUCTIONS.md   # Installation guide
â”‚   â””â”€â”€ ...
â”œâ”€â”€ tests/                      # Test files
â”œâ”€â”€ pyproject.toml              # Project configuration
â””â”€â”€ README.md                   # Project overview
```

## Core Game Flow

### Solo Game
1. User selects "Solo Game" from HomePage
2. GameLogic selects random start/end Wikipedia pages
3. SoloGamePage displays embedded Wikipedia content
4. Player navigates by clicking links, timer tracks progress
5. Game ends when target page is reached

### Multiplayer Game (Current Implementation)
1. **Room Setup**: Player creates/joins room via MultiplayerPage
2. **Lobby**: Real-time player list, host configures game
3. **Game Start**: Server selects pages, synchronizes all clients
4. **Racing**: Players navigate independently, progress shared
5. **Results**: First to finish triggers end, rankings displayed

## Key Classes and Components

### Client-Side Core Classes
- **MainApplication**: Main window, tab management, theme handling
- **HomePage**: Game mode selection, settings, about info
- **SoloGamePage**: Complete solo game implementation with WebView
- **MultiplayerPage**: Room creation/joining, lobby management
- **GameLogic**: Wikipedia API integration, page selection algorithms
- **NetworkManager**: Socket.IO client, server communication
- **ThemeManager**: Dark/light theme system with Qt stylesheets

### Server-Side Core Classes
- **GameRoom**: Room state, player management, game configuration
- **Player**: Individual player state, progress tracking
- **RoomManager**: Room lifecycle, cleanup, host transfers
- **SocketHandler**: Real-time event handling for multiplayer
- **APIRoutes**: REST endpoints for room operations

## Current Development Focus
The project is transitioning from a working solo game to a full multiplayer experience. Key areas of active development:

1. **Game State Synchronization**: Ensuring all players start simultaneously with identical conditions
2. **Real-time Progress Tracking**: Broadcasting player navigation events
3. **Results System**: Collecting and displaying final race results
4. **UI Polish**: Improving multiplayer interface consistency
5. **Error Handling**: Graceful network disconnection recovery

## Code Patterns and Conventions

### PyQt6 Patterns
- Use Qt signals/slots for event handling
- Apply consistent theming via ThemeManager
- Implement proper widget lifecycle (show/hide/cleanup)
- Use QTimer for periodic updates

### Networking Patterns
- Socket.IO events for real-time communication
- REST API for stateful operations (room creation/joining)
- Pydantic models for data validation
- Qt signals to bridge network events to UI updates

### Error Handling
- Try/catch around all network operations
- User-friendly error messages via QMessageBox
- Graceful degradation when server unavailable
- Logging for debugging (print statements currently)

## Dependencies and Requirements
- **Python**: 3.13+ (strict requirement)
- **PyQt6**: 6.7.0+ (GUI framework)
- **PyQt6-WebEngine**: 6.7.0+ (Wikipedia page display)
- **Requests**: 2.32.0+ (HTTP API calls)
- **BeautifulSoup4**: 4.12.0+ (HTML parsing)
- **Socket.IO Client**: 5.8.0+ (real-time communication)
- **FastAPI**: Latest (server framework)
- **Pydantic**: Latest (data validation)

## Testing Strategy
- Unit tests for core game logic
- Integration tests for multiplayer flow
- Manual testing with multiple clients
- Server stress testing with max players (10)

## Deployment Considerations
- Client: Standalone executable for Windows
- Server: Self-hosted deployment (user's server)
- Configuration: Environment variables for server settings
- Docker: Container deployment for server (planned)

## Known Issues and TODOs
- [ ] Complete multiplayer game flow implementation
- [ ] Add Redis persistence for room state
- [ ] Implement reconnection logic for network drops
- [ ] Add comprehensive error handling
- [ ] Create deployment packages
- [ ] Performance optimization for 10+ concurrent players

## Development Guidelines
- Maintain backward compatibility with solo game
- Follow existing UI/UX patterns
- Use type hints for all new code
- Add docstrings for public methods
- Test multiplayer features with multiple clients
- Keep server and client loosely coupled

## Recent Major Changes
- Added complete multiplayer server infrastructure
- Implemented real-time room management
- Created Socket.IO-based communication system
- Enhanced UI with multiplayer lobby functionality
- Updated project dependencies for networking

## File Modification Patterns
When working on this project, common modification patterns include:
- **GUI Updates**: Modify files in `src/gui/` and update theme applications
- **Game Logic**: Changes in `src/logic/` often require testing both solo and multiplayer modes
- **Server Changes**: Modifications in `server/` require server restart and client testing
- **Dependencies**: Updates to `pyproject.toml` need virtual environment refresh

This context should be automatically updated when significant architectural changes are made to the project.
