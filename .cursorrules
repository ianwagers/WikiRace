# WikiRace - Global Project Context for Cursor AI

## Project Overview
WikiRace is a desktop Wikipedia navigation game built with PyQt6 and Python 3.13. Originally a solo game, it has been significantly expanded with real-time multiplayer functionality using a FastAPI + Socket.IO server architecture.

## Current Status: v1.7.0 (Multiplayer 100% Complete + Production Ready)
- ✅ Solo gameplay fully functional
- ✅ Multiplayer server infrastructure complete and running
- ✅ Real-time room management and player communication working
- ✅ Multiplayer game flow implementation complete
- ✅ Socket.IO client-server integration working
- ✅ Game start functionality with 5-second visual countdown
- ✅ Wikipedia page selection integrated
- ✅ Complete navigation history tracking and visualization
- ✅ Automatic reconnection logic implemented
- ✅ Client configuration UI with server settings
- ✅ Docker deployment and installation scripts
- ✅ All multiplayer features tested and production ready

## Project Statistics (Auto-generated)
- **Total Python Files**: 3464
- **Lines of Code**: 1181163
- **GUI Components**: 0
- **Logic Components**: 0
- **Server Components**: 0
- **Documentation Files**: 4
- **Last Updated**: 2025-09-21 17:33:37

## Architecture Overview

### Client Application (PyQt6)
- **Entry Points**: bin/main.py, src/app.py
- **Main Window**: `src/gui/MainApplication.py` (tab-based interface)
- **Core Pages**: HomePage, SoloGamePage, MultiplayerPage, MultiplayerGamePage
- **Game Logic**: `src/logic/GameLogic.py` (Wikipedia API, page selection)
- **Network**: `src/logic/Network.py` (Socket.IO client, REST API calls, reconnection logic)
- **Configuration**: `src/logic/MultiplayerConfig.py` (centralized config management)
- **UI Components**: CountdownDialog, ServerConfigDialog, MultiplayerResultsDialog
- **Theming**: `src/logic/ThemeManager.py` (dark/light mode support)

### Multiplayer Server (FastAPI + Socket.IO)
- **Location**: `server/` directory
- **Entry**: `server/start_server.py` → `server/main.py`
- **Models**: `server/models.py` (GameRoom, Player, GameState, NavigationEntry)
- **Room Management**: `server/room_manager.py`
- **Socket Events**: `server/socket_handlers.py` (enhanced with countdown, config broadcast)
- **API Routes**: `server/api_routes.py`
- **Game Logic**: `server/game_logic.py` (Wikipedia page selection)
- **Config**: `server/config.py`
- **Deployment**: Docker, docker-compose.yml, nginx.conf, deploy.sh

## Key Technologies
- **Frontend**: PyQt6, PyQt6-WebEngine (Wikipedia display)
- **Backend**: FastAPI, Socket.IO, Pydantic
- **Data**: Redis (optional for persistence), in-memory storage (current)
- **APIs**: Wikipedia API, MediaWiki API
- **Build**: setuptools, pyproject.toml
- **Deployment**: Docker, Docker Compose, Nginx (reverse proxy)
- **Installation**: Cross-platform scripts (Windows/Linux/macOS)

## Project Structure
```
WikiRace/
├── bin/main.py                 # Application entry point
├── src/                        # Main application code
│   ├── app.py                  # Application initialization
│   ├── gui/                    # PyQt6 UI components (0 files)
│   │   ├── MainApplication.py  # Main window with tabs
│   │   ├── HomePage.py         # Landing page and game setup
│   │   ├── SoloGamePage.py     # Solo Wikipedia racing game
│   │   ├── MultiplayerPage.py  # Multiplayer room management
│   │   ├── MultiplayerGamePage.py # Multiplayer game wrapper
│   │   ├── CountdownDialog.py  # Game start countdown
│   │   ├── ServerConfigDialog.py # Server configuration UI
│   │   ├── MultiplayerResultsDialog.py # Results with path visualization
│   │   └── ...                 # Other UI components
│   ├── logic/                  # Business logic (0 files)
│   │   ├── GameLogic.py        # Core game mechanics
│   │   ├── Network.py          # Multiplayer networking with reconnection
│   │   ├── MultiplayerConfig.py # Configuration management
│   │   ├── ThemeManager.py     # UI theming system
│   │   └── ...
│   └── resources/              # Assets (icons, images)
├── server/                     # Multiplayer server
│   ├── main.py                 # FastAPI application
│   ├── start_server.py         # Server startup script
│   ├── models.py               # Data models (Pydantic) with NavigationEntry
│   ├── room_manager.py         # Game room lifecycle
│   ├── socket_handlers.py      # Socket.IO events with countdown & config broadcast
│   ├── api_routes.py           # REST API endpoints
│   ├── game_logic.py           # Server-side Wikipedia page selection
│   ├── config.py               # Server configuration
│   ├── Dockerfile              # Docker container configuration
│   ├── docker-compose.yml      # Full stack deployment
│   ├── deploy.sh               # Automated deployment script
│   ├── nginx.conf              # Production reverse proxy
│   └── DEPLOYMENT.md           # Comprehensive deployment guide
├── docs/                       # Documentation (4 files)
│   ├── MULTIPLAYER_SPEC.md     # Detailed multiplayer architecture
│   ├── SETUP_INSTRUCTIONS.md   # Installation guide
│   └── ...
├── tests/                      # Test files (1238 files)
├── install_client.bat          # Windows client installer
├── install_client.sh           # Linux/macOS client installer
├── pyproject.toml              # Project configuration
├── IMPLEMENTATION_SUMMARY.md   # Feature implementation summary
├── MULTIPLAYER_COMPLETION_REPORT.md # Complete implementation report
└── README.md                   # Project overview
```

## Core Game Flow

### Solo Game
1. User selects "Solo Game" from HomePage
2. GameLogic selects random start/end Wikipedia pages
3. SoloGamePage displays embedded Wikipedia content
4. Player navigates by clicking links, timer tracks progress
5. Game ends when target page is reached

### Multiplayer Game (Fully Implemented)
1. **Room Setup**: Player creates/joins room via MultiplayerPage with server configuration UI
2. **Lobby**: Real-time player list, host configures game settings with live broadcast
3. **Game Start**: Server selects Wikipedia pages, 5-second visual countdown, synchronizes all clients
4. **Racing**: Players navigate independently, detailed progress tracking with navigation history
5. **Results**: First to finish triggers end, complete path visualization with timestamps displayed

## Key Classes and Components

### Client-Side Core Classes
- **MainApplication**: Main window, tab management, theme handling
- **HomePage**: Game mode selection, settings, about info
- **SoloGamePage**: Complete solo game implementation with WebView
- **MultiplayerPage**: Room creation/joining, lobby management, server configuration
- **MultiplayerGamePage**: Multiplayer game wrapper with progress sidebar
- **CountdownDialog**: Visual countdown timer for game start
- **ServerConfigDialog**: Comprehensive server settings UI
- **MultiplayerResultsDialog**: Results display with path visualization
- **GameLogic**: Wikipedia API integration, page selection algorithms
- **NetworkManager**: Socket.IO client, server communication, reconnection logic
- **MultiplayerConfig**: Centralized configuration management
- **ThemeManager**: Dark/light theme system with Qt stylesheets

### Server-Side Core Classes
- **GameRoom**: Room state, player management, game configuration
- **Player**: Individual player state, detailed navigation tracking
- **NavigationEntry**: Detailed navigation history with timestamps
- **RoomManager**: Room lifecycle, cleanup, host transfers
- **SocketHandler**: Real-time event handling with countdown and config broadcast
- **APIRoutes**: REST endpoints for room operations

## Current Development Status
The project has successfully transitioned from a solo game to a complete multiplayer experience. All major features are implemented and production-ready:

1. ✅ **Game State Synchronization**: Complete with 5-second countdown and simultaneous start
2. ✅ **Real-time Progress Tracking**: Full navigation history tracking with timestamps
3. ✅ **Results System**: Complete path visualization with detailed statistics
4. ✅ **UI Polish**: Consistent theming and professional interface
5. ✅ **Error Handling**: Automatic reconnection and graceful recovery
6. ✅ **Configuration Management**: Client settings UI and server configuration
7. ✅ **Deployment**: Docker containers and cross-platform installation scripts

## Code Patterns and Conventions

### PyQt6 Patterns
- Use Qt signals/slots for event handling
- Apply consistent theming via ThemeManager
- Implement proper widget lifecycle (show/hide/cleanup)
- Use QTimer for periodic updates

### Networking Patterns
- Socket.IO events for real-time communication
- REST API for stateful operations (room creation/joining)
- Pydantic models for data validation
- Qt signals to bridge network events to UI updates

### Error Handling
- Try/catch around all network operations
- User-friendly error messages via QMessageBox
- Graceful degradation when server unavailable
- Logging for debugging (print statements currently)

## Dependencies and Requirements
- **Python**: 3.13+ (strict requirement)
- **PyQt6**: 6.7.0+ (GUI framework)
- **PyQt6-WebEngine**: 6.7.0+ (Wikipedia page display)
- **Requests**: 2.32.0+ (HTTP API calls)
- **BeautifulSoup4**: 4.12.0+ (HTML parsing)
- **Socket.IO Client**: 5.8.0+ (real-time communication)
- **FastAPI**: Latest (server framework)
- **Pydantic**: Latest (data validation)
- **Uvicorn**: Latest (ASGI server)
- **Redis**: 6.4.0+ (optional, for persistence)

## Testing Strategy
- Unit tests for core game logic
- Integration tests for multiplayer flow
- Manual testing with multiple clients
- Server stress testing with max players (10)

## Deployment Considerations
- Client: Cross-platform installation with automated scripts
- Server: Docker containerization with docker-compose.yml
- Configuration: Environment variables and UI-based client configuration
- Production: Nginx reverse proxy, SSL support, health monitoring
- Installation: One-command deployment via deploy.sh

## Implementation Status and TODOs
- [x] Complete multiplayer game flow implementation
- [x] Implement reconnection logic for network drops
- [x] Add comprehensive error handling
- [x] Create deployment packages (Docker + installation scripts)
- [x] Game start countdown display
- [x] Navigation history tracking and visualization
- [x] Client configuration UI
- [x] Host configuration broadcasting
- [ ] Add Redis persistence for room state (optional enhancement)
- [ ] Performance optimization for 20+ concurrent players (future enhancement)
- [ ] Advanced features: spectator mode, tournaments (future releases)

## Development Guidelines
- Maintain backward compatibility with solo game
- Follow existing UI/UX patterns
- Use type hints for all new code
- Add docstrings for public methods
- Test multiplayer features with multiple clients
- Keep server and client loosely coupled

## Recent Changes (Updated: December 2025)
- **ALL MISSING FEATURES IMPLEMENTED**: Complete multiplayer system now 100% functional
- **Game Start Countdown**: Added visual 5-second countdown with CountdownDialog
- **Navigation History**: Complete server-side tracking with NavigationEntry model
- **Path Visualization**: Detailed navigation history in results with timestamps
- **Reconnection Logic**: Automatic reconnection with exponential backoff
- **Client Configuration**: ServerConfigDialog with comprehensive settings UI
- **Deployment Ready**: Docker containers, installation scripts, deployment guides
- **Host Config Broadcast**: Real-time configuration synchronization
- **Production Ready**: All features tested and ready for deployment

## File Modification Patterns
When working on this project, common modification patterns include:
- **GUI Updates**: Modify files in `src/gui/` and update theme applications
- **Game Logic**: Changes in `src/logic/` often require testing both solo and multiplayer modes
- **Server Changes**: Modifications in `server/` require server restart and client testing
- **Dependencies**: Updates to `pyproject.toml` need virtual environment refresh

## Quick Start Commands

### Server Deployment:
```bash
cd server/
chmod +x deploy.sh
./deploy.sh deploy
```

### Client Installation:
```bash
# Windows: run install_client.bat
# Linux/macOS: chmod +x install_client.sh && ./install_client.sh
```

### Development:
```bash
# Start server manually
cd server/ && python start_server.py

# Start client
python bin/main.py
```

## Auto-Update Information
This context file was last updated on 2025-12-22 to reflect the complete multiplayer implementation.
All critical missing features have been implemented and the system is production-ready.

This context should be automatically updated when significant architectural changes are made to the project.